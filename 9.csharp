using System;
using System.Linq;

class HistoricalEvent
{
    private int day;
    private int month;
    private int year;
    private string eventName;

    public HistoricalEvent()
    {
        day = 1;
        month = 1;
        year = 1900;
        eventName = "Unknown";
    }

    public HistoricalEvent(int day, int month, int year, string eventName)
    {
        if (!IsValidDate(day, month, year))
            throw new ArgumentException("Некорректная дата.");
        
        this.day = day;
        this.month = month;
        this.year = year;
        this.eventName = eventName ?? throw new ArgumentNullException("Название события не может быть null.");
    }

    public HistoricalEvent(string eventName)
    {
        this.eventName = !string.IsNullOrWhiteSpace(eventName) 
            ? eventName 
            : throw new ArgumentNullException("Название события не может быть пустым.");
        day = 1;
        month = 1;
        year = 1900;
    }

    public int Day
    {
        get { return day; }
        set
        {
            if (!IsValidDate(value, month, year))
                throw new ArgumentException("Некорректное значение дня.");
            day = value;
        }
    }

    public int Month
    {
        get { return month; }
        set
        {
            if (!IsValidDate(day, value, year))
                throw new ArgumentException("Некорректное значение месяца.");
            month = value;
        }
    }

    public int Year
    {
        get { return year; }
        set
        {
            if (!IsValidDate(day, month, value))
                throw new ArgumentException("Некорректное значение года.");
            year = value;
        }
    }

    public string EventName
    {
        get { return eventName; }
        set 
        { 
            eventName = !string.IsNullOrWhiteSpace(value) 
                ? value 
                : throw new ArgumentNullException("Название события не может быть пустым.");
        }
    }

    private bool IsValidDate(int day, int month, int year)
    {
        if (year < 1 || month < 1 || month > 12 || day < 1)
            return false;
        return day <= DateTime.DaysInMonth(year, month);
    }

    public void InputFromKeyboard()
    {
        while (true)
        {
            try
            {
                Console.Write("Введите год: ");
                if (!int.TryParse(Console.ReadLine(), out int y) || y < 1)
                    throw new FormatException("Некорректный год");

                Console.Write("Введите месяц: ");
                if (!int.TryParse(Console.ReadLine(), out int m) || m < 1 || m > 12)
                    throw new FormatException("Некорректный месяц");

                Console.Write("Введите день: ");
                if (!int.TryParse(Console.ReadLine(), out int d) || d < 1 || d > DateTime.DaysInMonth(y, m))
                    throw new FormatException("Некорректный день");

                Console.Write("Введите название события: ");
                string name = Console.ReadLine();
                if (string.IsNullOrWhiteSpace(name))
                    throw new ArgumentNullException("Название события не может быть пустым.");

                day = d;
                month = m;
                year = y;
                eventName = name;
                return;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка: {ex.Message}\nПовторите ввод!\n");
            }
        }
    }

    public void Print()
    {
        Console.WriteLine(this.ToString());
    }

    public override string ToString()
    {
        return $"{day:D2}.{month:D2}.{year} - {eventName}";
    }

    public static int operator -(HistoricalEvent event1, HistoricalEvent event2)
    {
        DateTime date1 = new DateTime(event1.Year, event1.Month, event1.Day);
        DateTime date2 = new DateTime(event2.Year, event2.Month, event2.Day);
        return Math.Abs((date1 - date2).Days);
    }

    public static HistoricalEvent FindLatestEvent(HistoricalEvent[] events)
    {
        if (events == null || !events.Any(e => e != null))
            throw new ArgumentException("Нет доступных событий");

        DateTime latestDate = DateTime.MinValue;
        HistoricalEvent result = null;

        foreach (var ev in events)
        {
            if (ev == null) continue;
            
            DateTime currentDate = new DateTime(ev.Year, ev.Month, ev.Day);
            if (currentDate > latestDate)
            {
                latestDate = currentDate;
                result = ev;
            }
        }
        return result ?? throw new ArgumentException("Все элементы массива пусты");
    }
}

class Program
{
    static void Main()
    {
        HistoricalEvent[] events = new HistoricalEvent[20];
        int count = 0;

        while (true)
        {
            Console.WriteLine("\nМеню:");
            Console.WriteLine("1. Добавить событие");
            Console.WriteLine("2. Вывести все события");
            Console.WriteLine("3. Найти интервал между событиями");
            Console.WriteLine("4. Найти последнее событие");
            Console.WriteLine("5. Поиск по названию");
            Console.WriteLine("6. Выход");
            Console.Write("Выберите действие: ");

            if (!int.TryParse(Console.ReadLine(), out int choice))
            {
                Console.WriteLine("Некорректный ввод!\n");
                continue;
            }

            switch (choice)
            {
                case 1:
                    if (count >= 20)
                    {
                        Console.WriteLine("Достигнут лимит событий!");
                        break;
                    }
                    
                    try
                    {
                        var newEvent = new HistoricalEvent();
                        newEvent.InputFromKeyboard();
                        events[count++] = newEvent;
                        Console.WriteLine("Событие добавлено!");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Ошибка: {ex.Message}");
                    }
                    break;

                case 2:
                    if (count == 0)
                    {
                        Console.WriteLine("Список событий пуст!");
                        break;
                    }
                    
                    Console.WriteLine("\nСписок событий:");
                    for (int i = 0; i < count; i++)
                    {
                        Console.WriteLine($"{i + 1}. {events[i]}");
                    }
                    break;

                case 3:
                    if (count < 2)
                    {
                        Console.WriteLine("Требуется минимум 2 события!");
                        break;
                    }
                    
                    try
                    {
                        Console.Write("Введите номер первого события: ");
                        int index1 = GetIndex(count);
                        Console.Write("Введите номер второго события: ");
                        int index2 = GetIndex(count);
                        
                        int interval = events[index1] - events[index2];
                        Console.WriteLine($"Интервал: {interval} дней");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Ошибка: {ex.Message}");
                    }
                    break;

                case 4:
                    try
                    {
                        var latest = HistoricalEvent.FindLatestEvent(events);
                        Console.WriteLine($"Последнее событие: {latest}");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                    break;

                case 5:
                    Console.Write("Введите поисковый запрос: ");
                    string query = Console.ReadLine();
                    var results = events.Take(count)
                        .Where(e => e != null && e.EventName.IndexOf(query, StringComparison.OrdinalIgnoreCase) >= 0)
                        .ToList();
                    
                    if (results.Count == 0)
                    {
                        Console.WriteLine("Совпадений не найдено");
                        break;
                    }
                    
                    Console.WriteLine($"Найдено совпадений: {results.Count}");
                    results.ForEach(Console.WriteLine);
                    break;

                case 6:
                    Console.WriteLine("Выход из программы");
                    return;

                default:
                    Console.WriteLine("Некорректный выбор!");
                    break;
            }
        }
    }

    private static int GetIndex(int max)
    {
        while (true)
        {
            int index;
            if (!int.TryParse(Console.ReadLine(), out index) || index < 1 || index > max)
            {
                Console.Write($"Введите число от 1 до {max}: ");
                continue;
            }
            return index - 1;
        }
    }
}
